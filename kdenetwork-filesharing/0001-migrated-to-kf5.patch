diff --git a/CMakeLists.txt b/CMakeLists.txt
index f1039f1..11d5712 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,45 +1,64 @@
 project(filesharing)
+cmake_minimum_required(VERSION 2.8.12 FATAL_ERROR)
 
-if(NOT INSIDE_KDENETWORK)
-    message("Not building inside KDENetwork, loading KDE CMake Macros.")
+set(QT_MIN_VERSION "5.0.0")
+set(KF5_MIN_VERSION "5.7.0")
+set(ECM_MIN_VERSION "1.6.0")
 
-    find_package(KDE4 REQUIRED)
+find_package(ECM ${ECM_MIN_VERSION} CONFIG REQUIRED)
+set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH})
 
-    include(KDE4Defaults)
-    include(MacroLibrary)
+include(FeatureSummary)
+include(KDEInstallDirs)
+include(KDECMakeSettings)
+include(KDEFrameworkCompilerSettings)
 
-    include(CheckIncludeFile)
-    include(CheckIncludeFiles)
-    include(CheckSymbolExists)
-    include(CheckFunctionExists)
-    include(CheckLibraryExists)
-    include(CheckPrototypeExists)
-    include(CheckTypeSize)
+find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS
+    Core
+    Widgets
+)
 
-    set(CMAKE_REQUIRED_DEFINITIONS ${_KDE4_PLATFORM_DEFINITIONS})
-    if(WIN32)
-       set(CMAKE_REQUIRED_LIBRARIES ${KDEWIN32_LIBRARIES})
-       set(CMAKE_REQUIRED_INCLUDES  ${KDEWIN32_INCLUDES})
-    endif(WIN32)
-    add_definitions(${QT_DEFINITIONS} ${QT_QTDBUS_DEFINITIONS} ${KDE4_DEFINITIONS})
-    add_definitions(-DQT_USE_FAST_CONCATENATION -DQT_USE_FAST_OPERATOR_PLUS)
-    include_directories(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} ${KDE4_INCLUDES})
-endif(NOT INSIDE_KDENETWORK)
+find_package(KF5 ${KF5_MIN_VERSION} REQUIRED COMPONENTS
+    DocTools
+    CoreAddons
+    I18n
+    KIO
+    WidgetsAddons
+)
+
+find_package(PackageKitQt5 0.9.5)
+set_package_properties(PackageKitQt5
+    PROPERTIES DESCRIPTION "Software Manager integration"
+    TYPE OPTIONAL
+    PURPOSE "Needed to automatically install the samba package."
+)
+
+include(CheckIncludeFile)
+include(CheckIncludeFiles)
+include(CheckSymbolExists)
+include(CheckFunctionExists)
+include(CheckLibraryExists)
+include(CheckTypeSize)
+
+if(WIN32)
+    set(CMAKE_REQUIRED_LIBRARIES ${KDEWIN32_LIBRARIES})
+    set(CMAKE_REQUIRED_INCLUDES  ${KDEWIN32_INCLUDES})
+endif(WIN32)
 
 option(SAMBA_INSTALL "Offer to install Samba for file sharing with PackageKit if it is not already installed, use -DSAMBA_INSTALL=off to disable, use -DSAMBA_PACKAGE_NAME= to set package name." ON)
-if(NOT SAMBA_PACKAGE_NAME)
-    set(SAMBA_PACKAGE_NAME \\\"samba\\\")
-endif(NOT SAMBA_PACKAGE_NAME)
-if(SAMBA_INSTALL)
-    message(STATUS "Samba install feature will be enabled.")
+set(SAMBA_PACKAGE_NAME "samba" CACHE STRING "Name of distribution package to install to get a functional samba stack.")
+
+if(SAMBA_INSTALL AND PackageKitQt5_FOUND)
     add_definitions(-DSAMBA_INSTALL)
     add_definitions(-DSAMBA_PACKAGE_NAME=${SAMBA_PACKAGE_NAME})
-else(SAMBA_INSTALL)
-    message(STATUS "Samba install feature will NOT be enabled.")
-endif(SAMBA_INSTALL)
+else()
+    set(SAMBA_INSTALL false)
+endif()
+add_feature_info("Samba Installation" SAMBA_INSTALL "Automatic installation of '${SAMBA_PACKAGE_NAME}' using PackageKit.")
+
+# KI18N Translation Domain for this library
+add_definitions(-DTRANSLATION_DOMAIN=\"kfileshare\")
 
 add_subdirectory(samba)
 
-if(NOT INSIDE_KDENETWORK)
-    macro_display_feature_log()
-endif(NOT INSIDE_KDENETWORK)
+feature_summary(WHAT ALL INCLUDE_QUIET_PACKAGES FATAL_ON_MISSING_REQUIRED_PACKAGES)
diff --git a/samba/filepropertiesplugin/CMakeLists.txt b/samba/filepropertiesplugin/CMakeLists.txt
index 039526c..45cbc88 100644
--- a/samba/filepropertiesplugin/CMakeLists.txt
+++ b/samba/filepropertiesplugin/CMakeLists.txt
@@ -2,12 +2,22 @@
 
 set(sambausershareplugin_PART_SRCS sambausershareplugin.cpp delegate.cpp model.cpp)
 
-kde4_add_ui_files(sambausershareplugin_PART_SRCS sambausershareplugin.ui)
+ki18n_wrap_ui(sambausershareplugin_PART_SRCS sambausershareplugin.ui)
 
+add_library(sambausershareplugin MODULE ${sambausershareplugin_PART_SRCS})
 
-kde4_add_plugin(sambausershareplugin ${sambausershareplugin_PART_SRCS})
+target_link_libraries(sambausershareplugin
+    KF5::CoreAddons
+    KF5::I18n
+    KF5::KIOWidgets
+    KF5::WidgetsAddons
+)
 
-target_link_libraries(sambausershareplugin ${KDE4_KIO_LIBS})
+if(SAMBA_INSTALL)
+    target_link_libraries(sambausershareplugin PK::packagekitqt5)
+endif()
+
+target_include_directories(sambausershareplugin PUBLIC ${Qt5DBus_INCLUDE_DIRS})
 
 install(TARGETS sambausershareplugin DESTINATION ${PLUGIN_INSTALL_DIR})
 
diff --git a/samba/filepropertiesplugin/delegate.cpp b/samba/filepropertiesplugin/delegate.cpp
index c823716..128ba01 100644
--- a/samba/filepropertiesplugin/delegate.cpp
+++ b/samba/filepropertiesplugin/delegate.cpp
@@ -19,7 +19,7 @@
  */
 
 #include <QComboBox>
-#include <klocale.h>
+#include <KLocalizedString>
 
 #include "delegate.h"
 
diff --git a/samba/filepropertiesplugin/delegate.h b/samba/filepropertiesplugin/delegate.h
index bbaddd7..f7570dd 100644
--- a/samba/filepropertiesplugin/delegate.h
+++ b/samba/filepropertiesplugin/delegate.h
@@ -36,8 +36,7 @@ public:
     void setEditorData(QWidget *editor, const QModelIndex &index) const;
     void setModelData(QWidget *editor, QAbstractItemModel *model,
                       const QModelIndex &index) const;
-
-private slots:
+private Q_SLOTS:
     void emitCommitData();
 };
 
diff --git a/samba/filepropertiesplugin/model.cpp b/samba/filepropertiesplugin/model.cpp
index 2accd9f..b6ccb3f 100644
--- a/samba/filepropertiesplugin/model.cpp
+++ b/samba/filepropertiesplugin/model.cpp
@@ -35,15 +35,17 @@ UserPermissionModel::UserPermissionModel(KSambaShareData &shareData, QObject *pa
 
 void UserPermissionModel::setupData()
 {
-    QStringList acl = shareData.acl().split(",", QString::SkipEmptyParts);
+    QStringList acl = shareData.acl().split(QStringLiteral(","),
+                                            QString::SkipEmptyParts);
 
     QList<QString>::const_iterator itr;
     for (itr = acl.constBegin(); itr != acl.constEnd(); ++itr) {
-        QStringList userInfo = (*itr).trimmed().split(":");
+        QStringList userInfo = (*itr).trimmed().split(QStringLiteral(":"));
         usersAcl.insert(userInfo.at(0), QVariant(userInfo.at(1)));
     }
     if (usersAcl.isEmpty()) {
-        usersAcl.insert("Everyone", QVariant("R"));
+        usersAcl.insert(QStringLiteral("Everyone"),
+                        QVariant(QStringLiteral("R")));
     }
 }
 
@@ -76,13 +78,13 @@ QStringList UserPermissionModel::getUsersList() const
 #endif
 
     QStringList userList;
-    userList.append("Everyone");
+    userList.append(QStringLiteral("Everyone"));
     foreach (const QString &username, KUser::allUserNames()) {
-        if (username == "nobody") {
+        if (username == QStringLiteral("nobody")) {
             continue;
         }
         KUser user(username);
-        if (user.uid() >= defminuid) {
+        if (user.userId().nativeId() >= defminuid) {
             userList << username;
         }
     }
@@ -92,11 +94,13 @@ QStringList UserPermissionModel::getUsersList() const
 
 int UserPermissionModel::rowCount(const QModelIndex &parent) const
 {
+    Q_UNUSED(parent);
     return userList.count();
 }
 
 int UserPermissionModel::columnCount(const QModelIndex &parent) const
 {
+    Q_UNUSED(parent);
     return 2;
 }
 
@@ -137,7 +141,7 @@ bool UserPermissionModel::setData(const QModelIndex &index, const QVariant &valu
         return false;
     }
 
-    QString key("");
+    QString key;
     QMap<QString, QVariant>::ConstIterator itr;
     for (itr = usersAcl.constBegin(); itr != usersAcl.constEnd(); ++itr) {
         if (itr.key().endsWith(userList.at(index.row()))) {
@@ -162,14 +166,14 @@ bool UserPermissionModel::setData(const QModelIndex &index, const QVariant &valu
 
 QString UserPermissionModel::getAcl() const
 {
-    QString result("");
+    QString result;
 
     QMap<QString, QVariant>::ConstIterator itr;
     for (itr = usersAcl.constBegin(); itr != usersAcl.constEnd(); ++itr) {
         if (!itr.value().toString().isEmpty()) {
-            result.append(itr.key() + ":" + itr.value().toString().toLower());
+            result.append(itr.key() + QStringLiteral(":") + itr.value().toString().toLower());
             if (itr != (usersAcl.constEnd() - 1)) {
-                result.append(",");
+                result.append(QStringLiteral(","));
             }
         }
     }
diff --git a/samba/filepropertiesplugin/sambausershareplugin.cpp b/samba/filepropertiesplugin/sambausershareplugin.cpp
index 7bcddd9..7f19399 100644
--- a/samba/filepropertiesplugin/sambausershareplugin.cpp
+++ b/samba/filepropertiesplugin/sambausershareplugin.cpp
@@ -1,6 +1,7 @@
 /*
   Copyright (c) 2004 Jan Schaefer <j_schaef@informatik.uni-kl.de>
   Copyright (c) 2011 Rodrigo Belem <rclbelem@gmail.com>
+  Copyright (c) 2015 Harald Sitter <sitter@kde.org>
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
@@ -18,21 +19,18 @@
 
 */
 
+#include <QDialogButtonBox>
 #include <QFileInfo>
+#include <QFrame>
+#include <QPushButton>
+#include <QStandardPaths>
 #include <QStringList>
-#include <QStandardItemModel>
-#include <QDBusInterface>
-#include <QDBusReply>
-
-#include <kvbox.h>
-#include <kuser.h>
-#include <kdebug.h>
-#include <kpushbutton.h>
-#include <ksambashare.h>
-#include <ksambasharedata.h>
-#include <kmessagebox.h>
-#include <KDE/KPluginFactory>
-#include <KDE/KPluginLoader>
+
+#include <KMessageBox>
+#include <KPluginFactory>
+#include <KPluginLoader>
+#include <KSambaShare>
+#include <KSambaShareData>
 
 #include "sambausershareplugin.h"
 #include "model.h"
@@ -43,38 +41,35 @@ K_EXPORT_PLUGIN(SambaUserSharePluginFactory("fileshare_propsdlgplugin"))
 
 SambaUserSharePlugin::SambaUserSharePlugin(QObject *parent, const QList<QVariant> &args)
     : KPropertiesDialogPlugin(qobject_cast<KPropertiesDialog *>(parent))
-    , url()
+    , m_url(properties->url().toLocalFile())
     , shareData()
 {
-    url = properties->kurl().path(KUrl::RemoveTrailingSlash);
-    if (url.isEmpty()) {
+    Q_UNUSED(args);
+
+    if (m_url.isEmpty()) {
         return;
     }
 
-    QFileInfo pathInfo(url);
+    QFileInfo pathInfo(m_url);
     if (!pathInfo.permission(QFile::ReadUser | QFile::WriteUser)) {
         return;
     }
 
-    KGlobal::locale()->insertCatalog("kfileshare");
-
-    KVBox *vbox = new KVBox();
+    QFrame *vbox = new QFrame();
     properties->addPage(vbox, i18n("&Share"));
     properties->setFileSharingPage(vbox);
 
-    if (!QFile::exists("/usr/sbin/smbd")
-        && !QFile::exists("/usr/local/sbin/smbd")) {
-
+    if (QStandardPaths::findExecutable(QStringLiteral("smbd")).isEmpty()) {
         QWidget *widget = new QWidget(vbox);
         QVBoxLayout *vLayout = new QVBoxLayout(widget);
         vLayout->setAlignment(Qt::AlignJustify);
-        vLayout->setSpacing(KDialog::spacingHint());
+        //TODO PORT QT5 vLayout->setSpacing(QDialog::spacingHint());
         vLayout->setMargin(0);
 
         vLayout->addWidget(new QLabel(i18n("Samba is not installed on your system."), widget));
 
 #ifdef SAMBA_INSTALL
-        KPushButton *btn = new KPushButton(i18n("Install Samba..."), widget);
+        QPushButton *btn = new QPushButton(i18n("Install Samba..."), widget);
         btn->setDefault(false);
         vLayout->addWidget(btn);
         connect(btn, SIGNAL(clicked()), SLOT(installSamba()));
@@ -89,7 +84,7 @@ SambaUserSharePlugin::SambaUserSharePlugin(QObject *parent, const QList<QVariant
     QWidget *widget = new QWidget(vbox);
     propertiesUi.setupUi(widget);
 
-    QList<KSambaShareData> shareList = KSambaShare::instance()->getSharesByPath(url);
+    QList<KSambaShareData> shareList = KSambaShare::instance()->getSharesByPath(m_url);
 
     if (!shareList.isEmpty()) {
         shareData = shareList.at(0); // FIXME: using just the first in the list for a while
@@ -115,12 +110,12 @@ SambaUserSharePlugin::~SambaUserSharePlugin()
 {
 }
 
+#ifdef SAMBA_INSTALL
 void SambaUserSharePlugin::installSamba()
 {
-    unsigned int xid = 0;
-    QStringList packages;
-    packages << SAMBA_PACKAGE_NAME;
-    QString interaction("show-confirm-install,show-progress");
+    //unsigned int xid = 0;
+    QString package = QStringLiteral(SAMBA_PACKAGE_NAME);
+    /*QString interaction("show-confirm-install,show-progress");
 
     QDBusInterface device("org.freedesktop.PackageKit", "/org/freedesktop/PackageKit",
                           "org.freedesktop.PackageKit.Modify");
@@ -129,8 +124,24 @@ void SambaUserSharePlugin::installSamba()
                 i18n("<qt><strong>Samba could not be installed.</strong><br />Please, check if kpackagekit is properly installed</qt>"));
         return;
     }
-    QDBusReply<int> reply = device.call("InstallPackageNames", xid, packages, interaction);
+    QDBusReply<int> reply = device.call("InstallPackageNames", xid, package, interaction);
+    */
+    auto transaction = PackageKit::Daemon::resolve(package,
+                                                   PackageKit::Transaction::FilterNone);
+    connect(transaction,
+            SIGNAL(package(PackageKit::Transaction::Info,QString,QString)),
+            SLOT(packageInstall(PackageKit::Transaction::Info,QString,QString)));
+}
+
+void SambaUserSharePlugin::packageInstall(PackageKit::Transaction::Info info,
+                                          const QString &packageId,
+                                          const QString &summary)
+{
+    Q_UNUSED(info);
+    Q_UNUSED(summary);
+    PackageKit::Daemon::installPackage(packageId);
 }
+#endif // SAMBA_INSTALL
 
 void SambaUserSharePlugin::setupModel()
 {
@@ -147,7 +158,7 @@ void SambaUserSharePlugin::setupViews()
 void SambaUserSharePlugin::load()
 {
     bool guestAllowed = false;
-    bool sambaShared = KSambaShare::instance()->isDirectoryShared(url);
+    bool sambaShared = KSambaShare::instance()->isDirectoryShared(m_url);
 
     propertiesUi.sambaChk->setChecked(sambaShared);
     toggleShareStatus(sambaShared);
@@ -170,7 +181,7 @@ void SambaUserSharePlugin::applyChanges()
 
         shareData.setName(propertiesUi.sambaNameEdit->text());
 
-        shareData.setPath(url);
+        shareData.setPath(m_url);
 
         KSambaShareData::GuestPermission guestOk(shareData.guestPermission());
 
@@ -180,7 +191,7 @@ void SambaUserSharePlugin::applyChanges()
         shareData.setGuestPermission(guestOk);
 
         result = shareData.save();
-    } else if (KSambaShare::instance()->isDirectoryShared(url)) {
+    } else if (KSambaShare::instance()->isDirectoryShared(m_url)) {
         result = shareData.remove();
     }
 }
@@ -211,19 +222,19 @@ void SambaUserSharePlugin::checkShareName(const QString &name)
     }
 
     if (disableButton) {
-        properties->enableButtonOk(false);
+        properties->button(QDialogButtonBox::Ok)->setEnabled(false);
         propertiesUi.sambaNameEdit->setFocus();
         return;
     }
 
-    if (!properties->isButtonEnabled(KPropertiesDialog::Ok)) {
-        properties->enableButtonOk(true);
+    if (!properties->button(QDialogButtonBox::Ok)->isEnabled()) {
+        properties->button(QDialogButtonBox::Ok)->setEnabled(true);
     }
 }
 
 QString SambaUserSharePlugin::getNewShareName()
 {
-    QString shareName = KUrl(url).fileName();
+    QString shareName = QUrl(m_url).fileName();
 
     if (!propertiesUi.sambaNameEdit->text().isEmpty()) {
         shareName = propertiesUi.sambaNameEdit->text();
@@ -235,4 +246,4 @@ QString SambaUserSharePlugin::getNewShareName()
     return shareName;
 }
 
-#include "moc_sambausershareplugin.cpp"
+#include "sambausershareplugin.moc"
diff --git a/samba/filepropertiesplugin/sambausershareplugin.h b/samba/filepropertiesplugin/sambausershareplugin.h
index 7c0c260..3d283af 100644
--- a/samba/filepropertiesplugin/sambausershareplugin.h
+++ b/samba/filepropertiesplugin/sambausershareplugin.h
@@ -23,8 +23,13 @@
 
 #include <QVariant>
 #include <QComboBox>
+#ifdef SAMBA_INSTALL
+#include <PackageKit/Daemon>
+#include <PackageKit/Transaction>
+#endif // SAMBA_INSTALL
 
 #include <kpropertiesdialog.h>
+#include <klocalizedstring.h>
 
 #include "ui_sambausershareplugin.h"
 
@@ -42,11 +47,16 @@ public:
 private Q_SLOTS:
     void load();
     void toggleShareStatus(bool checked);
-    void installSamba();
     void checkShareName(const QString &name);
+#ifdef SAMBA_INSTALL
+    void installSamba();
+    void packageInstall(PackageKit::Transaction::Info info,
+                        const QString &packageId,
+                        const QString &summary);
+#endif // SAMBA_INSTALL
 
 private:
-    QString url;
+    QString m_url;
     KSambaShareData shareData;
     UserPermissionModel *model;
     Ui::PropertiesPageGUI propertiesUi;
